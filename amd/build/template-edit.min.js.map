{"version":3,"file":"template-edit.min.js","sources":["../src/template-edit.js"],"sourcesContent":["// This file is part of the tool_certificate plugin for Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD module used when editing davidCerezal table\n *\n * @module     tool_davidcerezal\n * @copyright  2024 David Cerezal\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import modal from 'core/modal_delete_cancel';\n// import {get_string as getString} from 'core/str';\nimport Modal from 'core/modal';\nimport ModalEvents from 'core/modal_events';\nimport {prefetchStrings} from 'core/prefetch';\n// import Ajax from 'core/ajax';\n\nconst SELECTORS = {\n    DELETEROW: \"[data-action='delete']\",\n};\n\n\nconst showdelete = async () => {\n    const modal = await Modal.create({\n        title: 'Test title',\n        body: 'Comoo',\n        footer: 'An example footer content',\n    }).then(modal => {\n        modal.show();\n        modal.registerCloseOnCancel();\n        return modal;\n    });\n    modal.getRoot().on(ModalEvents.hidden, () => this.destroy());\n};\n\n/**\n * Delete flow handler\n */\n/* const deleteRowHandler = async() => {\n    const modal = await await modalBodyRenderedPromise(ModalDeleteCancel, {\n        title: getString('deleteentry', 'tool_davidcerezal'),\n        body: getString('deletetitle', 'tool_davidcerezal'),\n    });\n    modal.getRoot().on(ModalEvents.delete, (e) => {\n        e.preventDefault();\n        modal.destroy();\n        Ajax.call([{\n            methodname: 'tool_davidcerezal_delete',\n            args: {\n                'id': element.dataset.id,\n                'sesskey': M.cfg.sesskey,\n            },\n            done: function (response) {\n                if (response.result) {\n                    window.console.log(getString('deleteconfirm', 'tool_davidcerezal'));\n                } else {\n                    window.console.log(getString('deleteerror', 'tool_davidcerezal'));\n                }\n            },\n            fail: function () {\n                window.console.error(getString('deleteerror', 'tool_davidcerezal'));\n            }\n        }]).always(() => {\n            modal.hide();\n        });\n    });\n}; */\n\n/**\n * Render a modal and return a body ready promise.\n *\n * @param {Modal} ModalClass the modal class\n * @param {object} modalParams the modal params\n * @return {Promise} the modal body ready promise\n */\n/* const modalBodyRenderedPromise = function(ModalClass, modalParams) {\n    return new Promise((resolve, reject) => {\n        ModalClass.create(modalParams).then((modal) => {\n            modal.setRemoveOnClose(true);\n            // Handle body loading event.\n            modal.getRoot().on(ModalEvents.bodyRendered, () => {\n                resolve(modal);\n            });\n            // Configure some extra modal params.\n            if (modalParams.saveButtonText !== undefined) {\n                modal.setSaveButtonText(modalParams.saveButtonText);\n            }\n            if (modalParams.deleteButtonText !== undefined) {\n                modal.setDeleteButtonText(modalParams.saveButtonText);\n            }\n            modal.show();\n            return;\n        }).catch(() => {\n            reject(`Cannot load modal content`);\n        });\n    });\n};\n */\nconst init = () => {\n    prefetchStrings('tool_davidcerezal', [\n        'deleteconfirm',\n        'deleteerror',\n        'deletetitle',\n        'deleteentry',\n    ]);\n\n    document.addEventListener('click', async (event) => {\n        const deleteRowElement = event.target.closest(SELECTORS.DELETEROW);\n        if (deleteRowElement) {\n            event.preventDefault();\n            await showdelete();\n        }\n    });\n};\n\nexport default {\n    init: init\n};\n"],"names":["SELECTORS","init","document","addEventListener","async","event","target","closest","preventDefault","Modal","create","title","body","footer","then","modal","show","registerCloseOnCancel","getRoot","on","ModalEvents","hidden","destroy","showdelete"],"mappings":";;;;;;;qLA8BMA,oBACS,sCAiGA,CACXC,KAlBS,mCACO,oBAAqB,CACjC,gBACA,cACA,cACA,gBAGJC,SAASC,iBAAiB,SAASC,MAAAA,QACNC,MAAMC,OAAOC,QAAQP,uBAE1CK,MAAMG,sBAvFCJ,kBACKK,eAAMC,OAAO,CAC7BC,MAAO,aACPC,KAAM,QACNC,OAAQ,8BACTC,MAAKC,QACJA,MAAMC,OACND,MAAME,wBACCF,UAELG,UAAUC,GAAGC,sBAAYC,QAAQ,UAAM,GAAKC,aA8EpCC"}