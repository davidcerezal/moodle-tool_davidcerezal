{"version":3,"file":"template-edit.min.js","sources":["../src/template-edit.js"],"sourcesContent":["// This file is part of the tool_certificate plugin for Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD module used when editing davidCerezal table\n *\n * @module     tool_davidcerezal\n * @copyright  2024 David Cerezal\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalDeleteCancel from 'core/modal_delete_cancel';\nimport {get_string as getString} from 'core/str';\nimport ModalEvents from 'core/modal_events';\nimport Notification from 'core/notification';\nimport {prefetchStrings} from 'core/prefetch';\nimport {call as fetchMany} from 'core/ajax';\nimport Templates from 'core/templates';\n\nconst SELECTORS = {\n    DELETEROW: \"[data-action='delete']\",\n    TABLEREGION: \".hero-unit\",\n};\n\n\n/**\n * Creates an object representing a row deletion.\n *\n * @param {number} rowId - The ID of the row to delete.\n * @param {number} courseId - The ID of the course.\n * @param {number} userId - The ID of the user.\n * @returns {object} - The delete row element object.\n */\nconst deleteRowCall = (rowId, courseId, userId) => ({\n    methodname: 'tool_davidcerezal_delete',\n    args: {\n        'rowid' : rowId,\n        'courseid' : courseId,\n        'userid' : userId,\n    },\n});\n\n/**\n * Returns the course template object.\n *\n * @param {number} courseId - The ID of the course.\n * @returns {object} The course template object.\n */\nconst getCourseTemplate = (courseId) => ({\n    methodname: 'tool_davidcerezal_get_template',\n    args: {\n        'courseid' : courseId\n    },\n});\n\n/**\n * Delete flow handler\n * @param {Element} deleteRowElement\n * @param {number} userId\n */\nconst deleteRowHandler = async(deleteRowElement, userId) => {\n    const modal = await ModalDeleteCancel.create({\n        title: getString('deleteentry', 'tool_davidcerezal'),\n        body: getString('deletetitle', 'tool_davidcerezal'),\n    })\n    .then(modal => {\n        modal.show();\n        return modal;\n    });\n\n    modal.getRoot().on(ModalEvents.delete, () => {\n        const rowId = deleteRowElement.getAttribute('data-id');\n        const courseId = deleteRowElement.getAttribute('data-courseid');\n        const checkheader = document.querySelector(SELECTORS.TABLEREGION);\n        const responses = fetchMany([\n            deleteRowCall(rowId, courseId, userId),\n            getCourseTemplate(courseId),\n        ]);\n        responses[0]\n        .fail(() => {\n            Notification.addNotification({\n                message: 'Error deleting row',\n                type: 'error'\n            });\n            return;\n        });\n\n        responses[1]\n        .done((data) => {\n            Templates.render('tool_davidcerezal/index_page', data.content).then((html, js) => {\n                Templates.replaceNodeContents(checkheader, html, js);\n                Templates.runTemplateJS(js);\n            });\n            Notification.addNotification({\n                message: \"Row deleted successfully\",\n                type: 'success'\n            });\n            return;\n        })\n        .fail(() => {\n            Notification.addNotification({\n                message: 'Error updating row html',\n                type: 'error'\n            });\n            return;\n        });\n        modal.hide();\n    });\n\n};\n\n\nconst init = (userId) => {\n    prefetchStrings('tool_davidcerezal', [\n        'deleteconfirm',\n        'deleteerror',\n        'deletetitle',\n        'deleteentry',\n    ]);\n\n    document.addEventListener('click', async (event) => {\n        const deleteRowElement = event.target.closest(SELECTORS.DELETEROW);\n        if (deleteRowElement) {\n            event.preventDefault();\n            await deleteRowHandler(deleteRowElement, userId);\n        }\n    });\n};\n\nexport default {\n    init: init\n};\n"],"names":["SELECTORS","deleteRowCall","rowId","courseId","userId","methodname","args","getCourseTemplate","init","document","addEventListener","async","deleteRowElement","event","target","closest","preventDefault","modal","ModalDeleteCancel","create","title","body","then","show","getRoot","on","ModalEvents","delete","getAttribute","checkheader","querySelector","responses","fail","addNotification","message","type","done","data","render","content","html","js","replaceNodeContents","runTemplateJS","hide","deleteRowHandler"],"mappings":";;;;;;;mTA+BMA,oBACS,yBADTA,sBAEW,aAYXC,cAAgB,CAACC,MAAOC,SAAUC,WACpCC,WAAY,2BACZC,KAAM,OACQJ,eACGC,gBACFC,UAUbG,kBAAqBJ,YACvBE,WAAY,iCACZC,KAAM,UACWH,yBA8EN,CACXK,KAlBUJ,uCACM,oBAAqB,CACjC,gBACA,cACA,cACA,gBAGJK,SAASC,iBAAiB,SAASC,MAAAA,cACzBC,iBAAmBC,MAAMC,OAAOC,QAAQf,qBAC1CY,mBACAC,MAAMG,sBA/DOL,OAAMC,iBAAkBR,gBACvCa,YAAcC,6BAAkBC,OAAO,CACzCC,OAAO,mBAAU,cAAe,qBAChCC,MAAM,mBAAU,cAAe,uBAElCC,MAAKL,QACFA,MAAMM,OACCN,SAGXA,MAAMO,UAAUC,GAAGC,sBAAYC,QAAQ,WAC7BzB,MAAQU,iBAAiBgB,aAAa,WACtCzB,SAAWS,iBAAiBgB,aAAa,iBACzCC,YAAcpB,SAASqB,cAAc9B,uBACrC+B,WAAY,cAAU,CACxB9B,cAAcC,MAAOC,SAAUC,QAC/BG,kBAAkBJ,YAEtB4B,UAAU,GACTC,MAAK,2BACWC,gBAAgB,CACzBC,QAAS,qBACTC,KAAM,aAKdJ,UAAU,GACTK,MAAMC,0BACOC,OAAO,+BAAgCD,KAAKE,SAASjB,MAAK,CAACkB,KAAMC,yBAC7DC,oBAAoBb,YAAaW,KAAMC,uBACvCE,cAAcF,6BAEfR,gBAAgB,CACzBC,QAAS,2BACTC,KAAM,eAIbH,MAAK,2BACWC,gBAAgB,CACzBC,QAAS,0BACTC,KAAM,aAIdlB,MAAM2B,WAkBIC,CAAiBjC,iBAAkBR"}